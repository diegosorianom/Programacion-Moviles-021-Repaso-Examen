1 - Instalar NestJS CLI
    └ npm install -g @nestjs/cli

2 - Crear un nuevo proyecto NestJs
    └ nest new back-end

3 - Instalar y configurar TypeORM con PostgreSQL
    └ npm install @nestjs/typeorm typeorm pg
    └ Configurarar la conexión a la base de datos en el archivo: src/app.module.ts
        └ imports: [
            TypeOrmModule.forRoot({
            type: 'postgres',
            host: 'localhost',
            port: 5432,
            username: 'postgres',
            password: 'sanvalero1234',
            database: 'localhost',
            autoLoadEntities: true,
            synchronize: true,
            }),
        ],

3.5 - Configurar TypeORM utilizando un .env
    └ npm install @nestjs/config
    └ .env
        └ DATABASE_HOST=localhost
          DATABASE_PORT=5432
          DATABASE_USER=tu_usuario
          DATABASE_PASSWORD=tu_contraseña
          DATABASE_NAME=back_end_db
    └ app.module.ts
        └ imports: [
            ConfigModule.forRoot({
            isGlobal: true, // Hace que las variables de entorno estén disponibles en toda la app
            }),
            TypeOrmModule.forRootAsync({
            imports: [ConfigModule],
            inject: [ConfigService],
            useFactory: (configService: ConfigService) => ({
                type: 'postgres',
                host: configService.get<string>('DATABASE_HOST'),
                port: configService.get<number>('DATABASE_PORT'),
                username: configService.get<string>('DATABASE_USER'),
                password: configService.get<string>('DATABASE_PASSWORD'),
                database: configService.get<string>('DATABASE_NAME'),
                autoLoadEntities: true,
                synchronize: true, // Solo en desarrollo
            }),
            }),
            TypeOrmModule.forFeature([User]),
        ],

4 - Crear una entidad y su repositorio
    └ src > entities > user.entity.ts
    └ importar entidad en app.module.ts
        └ imports: [
            TypeOrmModule.forRoot({
            /* Configuración de la DB */
            }),
            TypeOrmModule.forFeature([User]),
        ],

5 - Crear el servicio y controlador de Usuarios
    └ Generar el modulo, controlador y servicio
        └ nest generate module users
        └ nest generate service users
        └ nest generate controller users
    └ Configurar UsersModule
        └ imports: [TypeOrmModule.forFeature([User])],
        └ exports: [UsersService],
    └ Configurar UsersService
        └ constructor
            └ @InjectRepository
        └ async create
        └ async findAll
        └ async findOne
        └ async delete
    └ Configurar UsersController
        └ Constructor
        └ @Post create
        └ @Get findAll
        └ @Get :id findOne
        └ @Delete :id delete

6 - Crear la entidad Category
    └ @ManyToMany

7 - Crear la entidad Movie
    └ @ManyToMany
    └ @JoinTable

8 - Generar servicio y controlador de Movies
    └ nest generate module movies
    └ nest generate service movies
    └ nest generate controller movies

9 - Generar servicio y controlador de Category
    └ nest generate module categories
    └ nest generate service categories
    └ nest generate controller categories

10 - Configurar MoviesModule y CategoriesModule
    └ constructor
        └ @InjectRepository
        └ @InjectRepository x2 (en movies.service)
    └ async create
    └ async findAll
    └ async findOne
    └ async delete

11 - Configurar MoviesController y CategoriesController
    └ Constructor
    └ @Post create
    └ @Get findAll
    └ @Get :id findOne
    └ @Delete :id delete